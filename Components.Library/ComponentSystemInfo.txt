A Component is a isolated reusable part of a code base with aim to reduce complexity and scale of the 'main program', i.e. those parts of a program which cannot be isolated.

Optimal scenario example:
	- Multiple isolated components providing interfaces for end-point communication, data processing and encapsulation etc.
	- One 'major' component that is connecting highly abstracted functionality of other 'minor' components, that is all the non-separable logic very specific to this one program.
	- Main() method creating individual components through a factory

Each 'component' should contain following:
	- Definition 'DComponent : ComponentBase' abstract class serving as a component interface. Definition class defines abstract methods, that the component must implement.
	- Component variant 'VComponent : DComponent' class implementing a specific variant of the component definition for a specific purpose.
		For example definition of DPacketSender could have variants to send data over UDP for LAN, TCP for WAN, pipe for inter-process and simple variable for component inside same thread.
Other useful objects:
	- Mock 'MComponent : DComponent' providing a general (customizable if possible) mock of the component interface to be used mostly for testing of other components.
		This implementation should be as minimalistic as possible without any actual functionality and working only with default values.
	- Simpliest implementation providing at least one simple functioning variant of DComponent that can be used. Unlike a mock, this variant should implement actual functionality, although the most simple one.
		In example of DPacketSender above, this simple implementation could be just a call of callback method with given packet as an argument or storing the packet in a variable.
	- Test 'DComponentTest' class to provide basic test methods that should work for all variants of given component. E.g. after {store(A); store(B);} calling Load() should return B.


Second type of object in this architecture is Core. That is responsible for holding instances of required components and allows simple and generic form of communication.
	Normally single core for each instance of a program is enough. One might consider to create multiple cores or just multiple instances of the same core when switching between different variants of the same component definitions is expected.